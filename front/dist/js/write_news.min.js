function News(){this.progressGroup=$("#progress-group")}News.prototype.initUEditor=function(){window.ue=UE.getEditor("editor",{initialFrameHeight:400,serverUrl:"/ueditor/upload/"})},News.prototype.listenUploadFielEvent=function(){var o=$("#thumbnail-btn");o.change(function(){var e=o[0].files[0],t=new FormData;t.append("file",e),xfzajax.post({url:"/cms/upload_file/",data:t,processData:!1,contentType:!1,success:function(e){if(200===e.code){var t=e.data.url;$("#thumbnail-form").val(t)}}})})},News.prototype.handleFileUploadProgress=function(e){var t=e.total.percent.toFixed(0)+"%";News.progressGroup.show();var o=$(".progress-bar");o.css({width:t}),o.text(t)},News.prototype.handleFileUploadError=function(e){window.messageBox.showError(e.message),$("#progress-group").hide(),console.log(e.message)},News.prototype.handleFileUploadComplete=function(e){console.log(e),$("#progress-group").hide();var t="http://7xqenu.com1.z0.glb.clouddn.com/"+e.key;$("input[name='thumbnail']").val(t)},News.prototype.listenSubmitEvent=function(){$("#submit-btn").click(function(e){e.preventDefault();var t=$(this).attr("data-news-id"),o=$("input[name='title']").val(),n=$("select[name='category']").val(),r=$("input[name='desc']").val(),s=$("input[name='thumbnail']").val(),i=window.ue.getContent(),a="";a=t?"/cms/edit_news/":"/cms/write_news/",xfzajax.post({url:a,data:{title:o,category:n,desc:r,thumbnail:s,content:i,pk:t},success:function(e){200===e.code&&xfzalert.alertSuccess("恭喜！新闻发表成功！",function(){window.location.reload()})}})})},News.prototype.run=function(){var e=this;e.initUEditor(),e.listenSubmitEvent(),e.listenUploadFielEvent()},$(function(){(new News).run(),News.progressGroup=$("#progress-group")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
